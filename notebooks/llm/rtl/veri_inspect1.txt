Please act as a professional verilog designer. Validate the following verilog code:

// Width Conversion Module (8-bit to 16-bit)
module width_8to16(
    input clk,
    input rst_n,
    input valid_in1, // First valid data signal
    input [7:0] data_in1, // First 8-bit input data
    input valid_in2, // Second valid data signal
    output reg [15:0] data_out, // Converted 16-bit output data
    output reg valid_out   // Validity of the output data
);

reg [7:0] data_lock; // Register to store first valid 8-bit data

always @(posedge clk) begin
    if (~rst_n) begin
        data_out <= 0;
        valid_out <= 1'b0;
    end else if (valid_in1 && (!valid_in2)) begin
        data_out <= data_lock;
        valid_out <= 1'b1;
    } else if (valid_in1 && valid_in2) begin
        data_lock[7:0] = data_in1;
        data_lock[15:8] = data_in2;
        data_out = {data_lock, data_in2};
        valid_out <= 1'b1;
    end
end

always @(posedge clk or negedge rst_n) begin
    if (rst_n) begin
        data_lock <= 0;
    end
end

endmodule

